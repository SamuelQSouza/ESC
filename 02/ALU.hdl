/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

        PARTS:
            Mux16 (a=x, b=false, sel=zx, out=zeraX);
            Mux16 (a=y, b=false, sel=zy, out=zeraY);

            Not16 (in=zeraX, out=compdX);
            Not16 (in=zeraY, out=compdY);

            Mux16 (a=zeraX, b=compdX, sel=nx, out=newX);
            Mux16 (a=zeraY, b=compdY, sel=ny, out=newY);

            Add16 (a=newX, b=newY, out=soma);
            And16 (a=newX, b=newY, out=and);

            Mux16 (a=and, b=soma, sel=f, out=saida);
            Not16 (in=saida, out=ComplementoDaSaida);

            Mux16 (a=saida, b=ComplementoDaSaida, sel=no,  out=out, out[15]=ng, out[0..7]=Bit0ao7, out[8..15]=Bit8ao15);

            Or8Way (in=Bit0ao7, out=Or1);
            Or8Way (in=Bit8ao15, out=Oreo);
            Or(a=Or1, b=Oreo, out=or16Bits);
            Not (in=or16Bits, out=zr);
  }
